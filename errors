// SPDX-License-Identifier: MIT

pragma solidity ^0.8.17;

contract ErrorTriageExercise {
    /**
     * Finds the difference between each uint with it's neighbor (a to b, b to c, etc.)
     * and returns a uint array with the absolute integer difference of each pairing.
     */
    function diffWithNeighbor(uint256 _a, uint256 _b, uint256 _c, uint256 _d) public pure returns (uint256[] memory) {
        uint256[] memory results = new uint[](3);
        results[0] = absDiff(_a, _b);
        results[1] = absDiff(_b, _c);
        results[2] = absDiff(_c, _d);
        return results;
    }

    function absDiff(uint256 _a, uint256 _b) public pure returns (uint256) {
        if (_a > _b) {
            return _a - _b;
        } else {
            return _b - _a;
        }
    }

    /**
     * Changes the _base by the value of _modifier. Base is always >= 1000.
     * Modifiers can be between positive and negative 100.
     */
    function applyModifier(
        uint _base,
        int _modifier
    ) public pure returns (uint) {
        require(_base >= 1000, "Base must be >= 1000");
        require(
            _modifier >= -100 && _modifier <= 100,
            "Modifier must be between -100 and 100"
        );

        int256 result = int256(_base) + _modifier;
        require(result >= 0, "Result cannot be negative");
        return uint256(result);
    }

    /**
     * Pop the last element from the array and return the popped value.
     */
    uint[] arr;

    function popWithReturn() public returns (uint) {
        require(arr.length > 0, "Array is empty");
        uint lastIndex = arr.length - 1;
        uint lastElement = arr[lastIndex];
        arr.pop(); // Remove the last element
        return lastElement;
    }

    // The utility functions below are working as expected
    function addToArr(uint _num) public {
        arr.push(_num);
    }

    function getArr() public view returns (uint[] memory) {
        return arr;
    }

    function resetArr() public {
        delete arr;
    }
}
