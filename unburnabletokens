// SPDX-License-Identifier: MIT
pragma solidity ^0.8.16;

contract UnburnableToken {
    /// @notice Mapping to store how many tokens are owned by each address
    mapping(address => uint256) public balances;

    /// @notice Total supply of tokens
    uint256 public totalSupply;

    /// @notice Total number of tokens claimed so far
    uint256 public totalClaimed;

    /// @dev Mapping to track if an address has already claimed tokens
    mapping(address => bool) private hasClaimed;

    /// @dev Error indicating the caller has already claimed tokens
    error TokensClaimed();

    /// @dev Error indicating all tokens have been claimed
    error AllTokensClaimed();

    /// @dev Error indicating an unsafe transfer attempt
    /// @param to The address involved in the unsafe transfer
    error UnsafeTransfer(address to);

    /// @dev Constructor that sets the total supply of tokens to 100,000,000
    constructor() {
        totalSupply = 100000000; 
    }

    /// @notice Allows a wallet to claim 1000 tokens if they haven't claimed before and tokens are available
    function claim() public {
        // Check if the caller has already claimed tokens
        if (hasClaimed[msg.sender]) {
            revert TokensClaimed();
        }

        // Check if there are enough tokens left to claim
        if (totalClaimed + 1000 > totalSupply) {
            revert AllTokensClaimed();
        }

        // Update the balance and total claimed tokens
        balances[msg.sender] += 1000;
        totalClaimed += 1000;
        hasClaimed[msg.sender] = true;
    }

    /// @notice Safely transfers tokens to another address under specific conditions
    /// @param _to The address to transfer tokens to
    /// @param _amount The amount of tokens to transfer
    function safeTransfer(address _to, uint256 _amount) public {
        // Check if the recipient address is the zero address
        if (_to == address(0)) {
            revert UnsafeTransfer(_to);
        }

        // Check if the recipient has a Sepolia ETH balance greater than zero
        if (_to.balance == 0) {
            revert UnsafeTransfer(_to);
        }

        // Check if the sender has enough tokens to transfer
        if (balances[msg.sender] < _amount) {
            revert UnsafeTransfer(msg.sender);
        }

        // Perform the token transfer
        balances[msg.sender] -= _amount;
        balances[_to] += _amount;
    }
}
